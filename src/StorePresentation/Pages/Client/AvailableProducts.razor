@inject HttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using StorePresentation.Domain
@inject IAccessTokenProvider TokenProvider

<PageTitle>Productos disponibles</PageTitle>

<th>Notificación: @notify</th>
<br />
<h2>Productos disponibles</h2>
<br />

<div>
    <label for="categoryFilter">Filtrar por categoría:</label>
    <select id="categoryFilter" @bind="category">
        <option value="all">Mostrar todos</option> <!-- Added default option -->
        @foreach (var categoryOption in categories)
        {
            <option value="@categoryOption">@categoryOption</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="FilterProducts">Filtrar</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Imagen</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Precio unitario</th>
            <th></th>

        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Image</td>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>₡@product.Price</td>
                <td>
                <td>
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn btn-primary" @onclick="(() => AddToCart(product))">Agregar al carrito</button>
                        </Authorized>
                        <NotAuthorized>
                            <button disabled class="btn btn-secondary">Agrear al carrito</button>
                        </NotAuthorized>
                    </AuthorizeView>
                </td>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    private List<Product> products = new List<Product>();
    private string category = "all";
    private string orderBy = "a";
    private string token_str = "";
    private string notify = "";
    private List<string> categories = new List<string>();

    private async Task FilterProducts()
    {
        // Reset the products list before filtering
        products = new List<Product>();

        if (category == "all")
        {
            await GetUpdatedProducts();
        }
        else
        {
            await GetFilteredProducts(category);
        }
    }

    private async Task ShowNotification(string message)
    {
        notify = message;
        StateHasChanged();
        await Task.Delay(3000);
        notify = "";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUpdatedProducts();
        await ShowNotification("Productos filtrados");
    }

    public async Task GetFilteredProducts(string category)
    {
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7143/Products?category={category}&orderBy={orderBy}");
        var response = await Http.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            products = await response.Content.ReadFromJsonAsync<List<Product>>();
            await ShowNotification("Productos cargados.");
        }
        else
        {
            await ShowNotification("Error cargando productos.");
        }
    }

    public async Task GetUpdatedProducts()
    {
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7143/Products?category={category}&orderBy={orderBy}");
        var response = await Http.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            products = await response.Content.ReadFromJsonAsync<List<Product>>();
            // Extract categories from products
            categories = products.Select(p => p.Category).Distinct().ToList();
            await ShowNotification("Productos cargados.");
        }
        else
        {
            await ShowNotification("Eror cargando productos.");
        }
    }

    public async Task AddToCart(Product product)
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", GlobalVariables.GetUserToken());
        var response = await Http.PostAsJsonAsync("https://localhost:7143/Orders/" + GlobalVariables.GetUserEmail().Replace("@", "").Replace(".com", ""), product);

        if (response.IsSuccessStatusCode)
        {
            await ShowNotification("Producto agregado.");
        }
        else
        {
            var statusCode = (int)response.StatusCode;
            await ShowNotification("Eror agregando producto.");
        }
    }
}
