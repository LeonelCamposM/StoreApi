@page "/cart"
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers

@inject IAccessTokenProvider TokenProvider

<PageTitle>Su lista de compras</PageTitle>

<th>Notificación: @notify</th>

<AuthorizeView>
    <Authorized>

        <h2>Lista de compras </h2>

        <br />
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Imagen</th>
                    <th>Nombre</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>@product.Image</td>
                        <td>@product.Name</td>
                        <td>@product.Price</td>
                        <td>
                            <form>
                                <input type="number" id="cantidad" name="cantidad" min="1" max="100" @bind="product.Quantity">
                            </form>
                        </td>
                        <td>@product.Price*@product.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="CheckOut">Realizar pago</button>
        <button class="btn btn-secondary" @onclick="UpdateOrder">Actualizar orden</button>
    </Authorized>
    <NotAuthorized>
        <h2>Debe inciar sesión para consultar el carrito </h2>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<OrderItem> products = new List<OrderItem>();
    private string category = "a";
    private string orderBy = "d";
    private string token_str = "";
    private string notify = "";

    private async Task ShowNotification(string message)
    {
        notify = message;
        StateHasChanged();
        await Task.Delay(3000);
        notify = "";
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        await GetUpdatedOrder();
    }

    public async Task GetUpdatedOrder()
    {
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7143/Orders/" + GlobalVariables.GetUserEmail().Replace("@", "").Replace(".com", ""));
        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", GlobalVariables.GetUserToken());
        var response = await Http.SendAsync(requestMessage);

        if (response.IsSuccessStatusCode)
        {
            var updatedProducts = await response.Content.ReadFromJsonAsync<List<OrderItem>>();
            if (updatedProducts != null)
            {
                products = updatedProducts;
                await ShowNotification("Orden cargada.");
            }
            else
            {
                await ShowNotification("La orden actualizada está vacía.");
            }
        }
        else
        {
            await ShowNotification("Error obteniendo la orden.");
        }
    }

    public async Task UpdateOrder()
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", GlobalVariables.GetUserToken());
        var response = await Http.PutAsJsonAsync("https://localhost:7143/Orders/" + GlobalVariables.GetUserEmail().Replace("@", "").Replace(".com", ""), products);
        if (response.IsSuccessStatusCode)
        {
            await ShowNotification("Orden actualizada.");
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response Content: {responseContent}");
            await ShowNotification("Error al actualizar la orden.");
        }
        
    }

    public void CheckOut()
    {

    }

    public class OrderItem
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public double Stock { get; set; }
        public string Image { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public double Quantity { get; set; }

        public OrderItem(string id, string name, double price, double stock, string image, string description, string category, double quantity)
        {
            Id = id; 
            Name = name;
            Price = price;
            Stock = stock;
            Image = image;
            Description = description;
            Category = category;
            Quantity = quantity;
        }
    }
}
