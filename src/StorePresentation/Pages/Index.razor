@page "/"
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@inject IAccessTokenProvider TokenProvider

<PageTitle>Productos disponibles</PageTitle>

<h2>Productos disponibles</h2>
<br />
<table class="table">
    <thead>
        <tr>
            <th>Imagen</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Precio</th>
            <th>Acción</th>
       
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Image</td>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>@product.Price</td>
                <td>
                <td> 
                    <AuthorizeView>
                        <Authorized>
                            <button @onclick="(() => AddToCart(product))">Add to Cart</button>
                        </Authorized>
                        <NotAuthorized>
                            <button disabled> Add to Cart</button>
                        </NotAuthorized>
                    </AuthorizeView>
                </td>
                </td>
            </tr>
        }

        <h2>cart</h2>
        @foreach (var product in shoppingCart)
        {
            <tr>
                <td>@product.Image</td>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>@product.Price</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private List<Product> products = new List<Product>();
    private List<Product> shoppingCart = new List<Product>();

    private string category = "a";
    private string orderBy = "d";
    private string token_str = "";

    protected override async Task OnInitializedAsync()
    {
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7143/Products?category={category}&orderBy={orderBy}");
        var response = await Http.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            products = await response.Content.ReadFromJsonAsync<List<Product>>();
        }
        else
        {
            var statusCode = (int)response.StatusCode;
            Console.WriteLine($"Eror agregando producto.");
        }
    }

    public async Task AddToCart(Product product)
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", GlobalVariables.GetUserToken());
        var response = await Http.PostAsJsonAsync("https://localhost:7143/Orders/" + GlobalVariables.GetUserEmail().Replace("@","").Replace(".com", ""), product);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Producto agregado.");
        }
        else
        {
            var statusCode = (int)response.StatusCode;
            Console.WriteLine($"Eror agregando producto.");
        }
    }

    public class Product
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public double Stock { get; set; }
        public string Image { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        //public int Quantity { get; set; }

        public Product(string id, string name, double price, double stock, string image, string description, string category)
        {
            Id = id;
            Name = name;
            Price = price;
            Stock = stock;
            Image = image;
            Description = description;
            Category = category;
       
        }
    }
}
