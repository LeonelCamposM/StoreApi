@page "/fetchdata"
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@inject IAccessTokenProvider TokenProvider
@using Microsoft.AspNetCore.Identity

@attribute [Authorize]

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data autorized from the server.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (GetUserRole(token_str) == @GetUserRole(token_str))
    {
        <p>You can only see this if you're in the '@GetUserRole(token_str)' role.</p>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Category</td>
                    <td>@product.Category</td>
                    <td>@product.Price</td>
                </tr>
            }
        </tbody>
    </table>
    <text>
       Token: @token_str
    </text>
}

@code {
    private List<Product> products = new List<Product>();
    private string category = "a";
    private string orderBy = "d";
    private string token_str = "";

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            token_str = token.Value;
            GetUserRole(token_str);
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7143/Products?category={category}&orderBy={orderBy}");
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                products = await response.Content.ReadFromJsonAsync<List<Product>>();
            }
            else
            {
                var statusCode = (int)response.StatusCode;
            }
        }
    }

    private string GetUserRole(string token_str)
    {
        var role = "";
        if(token_str != ""){
            var handler = new JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(token_str);
            var userName = token.Claims.FirstOrDefault(c => c.Type == "given_name")?.Value;
            role = token.Claims.FirstOrDefault(c => c.Type == "extension_role")?.Value;
        }
        return role;
    }

    public class Product
    {
        public string Name { get; set; }
        public double Price { get; set; }
        public double Stock { get; set; }
        public string Image { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }

        public Product(string name, double price, double stock, string image, string description, string category)
        {
            Name = name;
            Price = price;
            Stock = stock;
            Image = image;
            Description = description;
            Category = category;
        }
    }
}
