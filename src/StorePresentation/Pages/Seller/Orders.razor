@inject HttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using System.Text.Json
@using Newtonsoft.Json
@inject IAccessTokenProvider TokenProvider

<PageTitle>Ventas realizadas </PageTitle>
<th>Notificación: @notify </th>

<AuthorizeView>
    <Authorized>
        <h2>Ventas realizadas </h2>
        <br />
        <table class="table">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Dirección</th>
                    <th>Correo</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr>
                        <th>@order.OrderInfo.Date</th>
                        <td>@order.OrderInfo.Address</td>
                        <td>@order.OrderInfo.Email</td>
                        <td>@order.OrderInfo.Total</td>
                    </tr>
                    @foreach (var item in order.Items)
                    {  
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td>@item.Price</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

    </Authorized>
    <NotAuthorized>
        <h2>Debe inciar sesión para consultar las ordenes </h2>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<OrderWithItems> orders = new List<OrderWithItems>();
    private string category = "a";
    private string orderBy = "d";
    private string token_str = "";
    private string notify = "";

    private async Task ShowNotification(string message)
    {
        notify = message;
        StateHasChanged();
        await Task.Delay(3000);
        notify = "";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetOrders();
    }

    private async Task GetOrders()
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", GlobalVariables.GetUserToken());
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7143/Orders");
        var response = await Http.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            string json = await response.Content.ReadAsStringAsync();
            orders = JsonConvert.DeserializeObject<List<OrderWithItems>>(json);
            await ShowNotification("Productos cargados.");
        }
        else
        {
            await ShowNotification("Eror cargando productos.");
        }
    }

    public class Order
    {
        public string Address { get; set; }
        public double Total { get; set; }
        public string Date { get; set; }
        public string Email { get; set; }

        public Order(string address, double total, string date, string email)
        {

            Address = address;
            Total = total;
            Date = date;
            Email = email;
        }

        public Order()
        {

            Address = "";
            Total = 0;
            Date = "";
            Email = "";
        }
    }

    public class OrderItem
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public string Image { get; set; }
        public double Quantity { get; set; }


        public OrderItem(string id, string name, double price, string image, double quantity)
        {
            Id = id;
            Name = name;
            Price = price;
            Image = image;
            Quantity = quantity;
        }
    

        public OrderItem()
        {
            Id = "";
            Name = "";
            Price = 0;
            Image = "";
            Quantity = 0;
        }
    }

    
    public class OrderWithItems
    {
        public Order OrderInfo { get; set; }
        public List<OrderItem> Items { get; set; }

        public OrderWithItems(Order order, List<OrderItem> items)
        {
            OrderInfo = order;
            Items = items;
        }

    }
}
